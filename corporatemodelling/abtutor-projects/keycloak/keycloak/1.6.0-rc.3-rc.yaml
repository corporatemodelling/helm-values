# Default values for abtutor-keycloak.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# If true, additional resources are created that can be
# tested with the templating tests.
debug: false

# Image registries.
registry:
  # If image version is NOT a prerelease, this will be used.
  # Build script will replace this placeholder with the actual value.
  cmsPublicRegistry: ghcr.io/corporatemodelling
  # If image version IS a prerelease, this will be used.
  # Build script will replace this placeholder with the actual value.
  cmsPrivateRegistry: cr.corporatemodelling.com
  # If this is set, it is used regardless.
  override:

# Realm info
# Client names and secrets.
# Supply the secret via "--set" command line parameter when installing.
# ⚠️⚠️⚠️ Do NOT commit an actual client secret to source control. ⚠️⚠️⚠️
client:
  oidc:
    name: abtutor-openid-connect
    secret:
    # Alternatively, put the name of an existing K8S secret here.
    # Secret must have a specifically-named value (defined by "key") inside.
    existingSecret:
      name:
      # If blank, the release namespace is used.
      namespace:
      # If blank, "secret" is used.
      key:
  admin:
    name: admin-cli
    secret:
    # Alternatively, put the name of an existing K8S secret here.
    # Secret must have a specifically-named value (defined by "key") inside.
    existingSecret:
      name:
      # If blank, the release namespace is used.
      namespace:
      # If blank, "secret" is used.
      key:
# A dictionary of claim mappings, from a database field to a named claim.
# The dictionary key is just a "display name" of the claim that will appear in the
# Keycloak UI (naming convention seems to be all-lower-case with spaces).
# Type should be "long", "int", "String" etc
claimMappings:
  "user id":
    from: keycloak.session.realm.users.query.idp_user_id
    to: user_id
    type: long
  "business accounts id":
    from: BusinessAccounts_ID
    to: business_accounts_id
    type: long
  "abtutor roles":
    to: role
    multivalued: true
    protocolMapper: oidc-usermodel-realm-role-mapper
    type: String

# Role names.
roles:
  admin:
    name: abtutor
  distributor:
    name: distributor
  customer:
    name: customer

# To enable reCAPTCHA, set enabled to true, and set keys appropriately.
# Keycloak currently only supports V2 keys.
reCAPTCHA:
  enabled: false
  siteKey: put-your-recaptcha-site-key-here
  secret: put-your-recaptcha-secret-key-here
  # Alternatively, put the name of an existing K8S secret here.
  # Secret must have a specifically-named value (defined by "key") inside.
  existingSecret:
    name:
    # If blank, the release namespace is used.
    namespace:
    # If blank, "secret" is used.
    key:

# Prefixes for ingresses that we might want to include
# in the valid-redirects sections of the realm config.
ingressPrefixes:
  webwftl: /webwftl

email:
  host: mailhog
  port: 1025
  # If true, set user and password.
  auth: false
  user:
  password:
  # Alternatively, describe an existing secret that the password is defined in.
  existingSecret:
    name:
    namespace:
    key:
  from:
    address: userauth@abtutor.com
    display: ABtutor User Services

# Name of a service account to use for the non-bitnami stuff.
# If blank, "default" will be used.
serviceAccount:
  name:

# Definition for the user webservice
# This is the middleman between the custom Keycloak user storage provider
# and the ABtutor database.
userWebservice:
  # If you change this, you need to also change keycloak.userWebserviceName
  name: user-webservice
  containerPort: 80
  service:
    type: ClusterIP
    port: 80
  image:
    repository: corporatemodelling/abtutor-projects/keycloak/user-webservice
    pullPolicy: IfNotPresent
    tag: "1.0.0"

  database:
    host:
    port: 26257
    name: abtutor
    user:
    sslSecret:
    password:
    debug: false

  # You can set this to Debug or Warning or Error or whatever (Microsoft logging levels) ...
  loggingLevel: Information
  replicaCount: 1

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Service that provides secrets to the auth-injector OIDC login service.
# You should ensure that cluster network policy restricts access to ONLY that service.
clientSecretProvider:
  enabled: true
  name: client-secret-provider
  containerPort: 8080
  service:
    type: ClusterIP
    port: 80
  image:
    registry: docker.io
    repository: halverneus/static-file-server
    pullPolicy: IfNotPresent
    tag: v1.8.11

  replicaCount: 1

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Values for dependency with alias "keycloak". If you change the alias, change
# this section name.
# See Bitnami's Keycloak chart documentation for the meaning of these values.
keycloak:
  production: true
  proxy: edge
  httpRelativePath: /cmsAuth/
  ingress:
    ingressClassName: nginx
    # We will create our own ingress. This disables the Bitnami chart's ingress-creation.
    enabled: false
    # Use minion if master ingress exists.
    mergeableType: minion
    # TLS secret will only be used if mergeableType is not "minion"
    tlsSecretName: your-secret-name

  auth:
    adminUser: admin
    adminPassword: password
    # You can define an existing secret with the password here.
    existingSecret:
    passwordSecretKey:

  extraStartupArgs: --vault=file --vault-dir=/cmsVault --import-realm

  initContainers:
    - name: custom-jars-installer
      image: "{{ .Values.cmsInitContainer.registry }}/{{ .Values.cmsInitContainer.repository }}:{{ .Values.cmsInitContainer.tag }}"
      imagePullPolicy: Always
      volumeMounts:
        - name: "{{ .Release.Name }}-provider-jars"
          mountPath: /providers
        - name: "{{ .Release.Name }}-theme-jars"
          mountPath: /themes

  extraVolumeMounts:
    - name: "{{ .Release.Name }}-realm-configs"
      mountPath: /opt/bitnami/keycloak/data/import
    - name: "{{ .Release.Name }}-client-secrets"
      mountPath: /cmsVault
    - name: "{{ .Release.Name }}-provider-jars"
      mountPath: /opt/bitnami/keycloak/providers
    - name: "{{ .Release.Name }}-theme-jars"
      mountPath: /opt/bitnami/keycloak/themes

  extraVolumes:
    - name: "{{ .Release.Name }}-provider-jars"
      emptyDir: {}
    - name: "{{ .Release.Name }}-theme-jars"
      emptyDir: {}
    - name: "{{ .Release.Name }}-realm-configs"
      secret:
        secretName: "{{ .Release.Name }}-realm-configs"
    - name: "{{ .Release.Name }}-client-secrets"
      secret:
        secretName: "{{ .Release.Name }}-client-secrets"

  userWebserviceName: user-webservice
  hostname: ablmsdev.com
  ingressTlsSecretName: your-ingress-tls-secret-name-here
  cmsInitContainer:
    registry: cr.corporatemodelling.com
    repository: corporatemodelling/abtutor-projects/keycloak/initcontainer
    tag: "1.0.0"

  extraEnvVars:
    # Thanks to bitnami's usage of "common.tplvalues.render" in their
    # Keycloak chart (VERY well played, bitnami!) the {{ .Values.blah }}
    # items will get expanded correctly.
    - name: KC_HOSTNAME
      value: "https://{{ .Values.hostname }}{{ .Values.httpRelativePath }}"
    - name: KC_VAULT
      value: file
    - name: KC_HOSTNAME_BACKCHANNEL_DYNAMIC
      value: "true"
    - name: KEYCLOAK_USP_WS_BASE_URL
      # Thanks to bitnami's usage of "common.tplvalues.render" in their
      # Keycloak chart (VERY well played, bitnami!) this will get expanded correctly.
      value: http://{{ .Release.Name }}-{{ .Values.userWebserviceName }}

  # Name of a service account to use for all of this.
  # If blank, "default" will be used.
  serviceAccount:
    name:
    create: false
